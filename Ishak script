-- RayField Implementation for Block System
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

-- Create main window
local Window = Rayfield:CreateWindow({
   Name = "Niggersaken Hub",
   LoadingTitle = "lele",
   LoadingSubtitle = "by [Your Name]",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "ForsakenConfig",
      FileName = "CombatSettings"
   }
})

-- Create tabs
local CombatTab = Window:CreateTab("Combat", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)

-- Combat Controls Section
local BlockSection = CombatTab:CreateSection("Block Controls")

-- Infinite Stamina Toggle
local InfiniteStaminaToggle = CombatTab:CreateToggle({
   Name = "Infinite Stamina Mode",
   CurrentValue = false,
   Flag = "InfiniteStamina",
   Callback = function(Value)
       _G.InfiniteStamina = Value
       Rayfield:Notify({
          Title = "Stamina Mode Changed",
          Content = Value and "Infinite stamina activated" or "Normal stamina restored",
          Duration = 1.5,
          Image = 4483362458
       })
   end,
})

-- Block Buttons
local LightBlockButton = CombatTab:CreateButton({
   Name = "Light Block (0.1s)",
   Callback = function()
       if _G.BlockCooldown then return end
       
       game:GetService("ReplicatedStorage").CombatEvent:FireServer("BlockAttempt", "Light")
       
       -- Cooldown effect
       _G.BlockCooldown = true
       LightBlockButton:Set("Text", "Cooldown...")
       task.delay(0.5, function()
           _G.BlockCooldown = false
           LightBlockButton:Set("Text", "Light Block (0.1s)")
       end)
   end
})

local HeavyBlockButton = CombatTab:CreateButton({
   Name = "Heavy Block (0.5s)",
   Callback = function()
       if _G.BlockCooldown then return end
       
       game:GetService("ReplicatedStorage").CombatEvent:FireServer("BlockAttempt", "Heavy")
       
       -- Cooldown effect
       _G.BlockCooldown = true
       HeavyBlockButton:Set("Text", "Cooldown...")
       task.delay(1.0, function()
           _G.BlockCooldown = false
           HeavyBlockButton:Set("Text", "Heavy Block (0.5s)")
       end)
   end
})

-- Visual Feedback Section
local FeedbackSection = CombatTab:CreateSection("Visual Feedback")

local BlockStatusLabel = CombatTab:CreateLabel("Status: Ready")
local PingDisplayLabel = CombatTab:CreateLabel("Current Ping: Calculating...")

-- Ping Monitor
task.spawn(function()
    while task.wait(1) do
        local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
        PingDisplayLabel:Set("Current Ping: "..ping.."ms")
        
        -- Auto-adjust based on ping
        if ping > 200 then
            PingDisplayLabel:Set("Current Ping: "..ping.."ms (High Latency)")
        end
    end
end)

-- Settings Section
local ConfigSection = SettingsTab:CreateSection("Configuration")

-- Timing Adjustments
SettingsTab:CreateSlider({
   Name = "Light Block Window",
   Range = {0.05, 0.2},
   Increment = 0.01,
   Suffix = "seconds",
   CurrentValue = 0.1,
   Flag = "LightBlockTiming",
   Callback = function(Value)
       _G.LightBlockDuration = Value
       LightBlockButton:Set("Name", "Light Block ("..Value.."s)")
   end
})

SettingsTab:CreateSlider({
   Name = "Heavy Block Window",
   Range = {0.3, 1.0},
   Increment = 0.05,
   Suffix = "seconds",
   CurrentValue = 0.5,
   Flag = "HeavyBlockTiming",
   Callback = function(Value)
       _G.HeavyBlockDuration = Value
       HeavyBlockButton:Set("Name", "Heavy Block ("..Value.."s)")
   end
})

-- Keybinds
SettingsTab:CreateKeybind({
   Name = "Light Block Keybind",
   CurrentKeybind = "Q",
   HoldToInteract = false,
   Flag = "LightBlockKey",
   Callback = function(Key)
       _G.LightBlockKey = Key
   end,
})

SettingsTab:CreateKeybind({
   Name = "Heavy Block Keybind",
   CurrentKeybind = "E",
   HoldToInteract = false,
   Flag = "HeavyBlockKey",
   Callback = function(Key)
       _G.HeavyBlockKey = Key
   end,
})

-- Keybind Handler
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    
    if input.KeyCode == Enum.KeyCode[_G.LightBlockKey or "Q"] then
        LightBlockButton.Callback()
    elseif input.KeyCode == Enum.KeyCode[_G.HeavyBlockKey or "E"] then
        HeavyBlockButton.Callback()
    end
end)

-- Theme Customization (Optional)
Window:SelectTab(CombatTab)
Rayfield:LoadConfiguration() -- Load saved settings
